// const replace = require("gulp-replace");

define(function (require) {
  let defaultJson = {
    id: "container0",
    type: "container",
    visible: true,
    layout: {
      display: "block",
      flexDirection: "row",
      flexWrap: "wrap",
      justifyContent: "center",
      flexShrink: 1,
      gap: "10px",
      columnPosition: "center",
      alignItems: "center",
      paddingTop: "20px",
      paddingBottom: "20px",
      paddingLeft: "20px",
      paddingRight: "20px",
    },
    style: {
      minWidth: "300px",
      width: "100%",
      minHeight: "505px",
      backgroundColor: "#F5F5DC",
      borderStyle: "dotted",
      borderColor: "black",
    },
    widgets: [
      {
        id: "container1",
        type: "container",
        visible: true,
        layout: {
          display: "flex",
          flexDirection: "row",
          flexWrap: "wrap",
          justifyContent: "center",
          flexShrink: 1,
          gap: "10px",
          columnPosition: "center",
          alignItems: "center",
          paddingTop: "10px",
          paddingBottom: "10px",
          paddingLeft: "10px",
          paddingRight: "10px",
          marginBottom: "20px",
        },
        style: {
          width: "100%",
          backgroundColor: "#F5F5DC",
          borderStyle: "dotted",
        },
        widgets: [
          {
            id: "text1",
            type: "h2",
            text: "{{title}}+' and '+{{title2}}",
            bindingType: "computed",
            visible: true,
            layout: {},
            style: {
              borderStyle: "solid",
              borderColor: "black",
            },
            font: {},
          },
        ],
      },
      {
        id: "people",
        type: "table",
        tableTypes: ["table-vmiddle", "table-hover","bootgrid-table","table-striped","table-striped-column"],
        // table table-vmiddle bootgrid-table table-hover table-striped table-striped-column
        data: "{{people}}",
        visible: true,
        layout: {
          paddingTop: "10px",
          paddingBottom: "10px",
          paddingLeft: "10px",
          paddingRight: "10px",
          marginTop: "10",
          marginBottom: "20px",
          marginLeft: "auto",
          marginRight: "auto",
        },
        style: {
          minWidth: "",
          maxWidth: "",
          width: "80%",
          height: "",
          // backgroundColor: "#F5F5DC",
          // borderStyle: "dotted",
        },
        columns: [
          {
            id: "text1",
            type: "th",
            header: {
              id: "text2",
              type: "th",
              layout: {
                verticalAlign: "middle",
              },
              style: {},
              widgets: [
                {
                  id: "text1",
                  type: "span",
                  text: "First Name",
                  visible: true,
                  layout: {},
                  style: {},
                  font: {},
                },
              ],
            },
            td: {
              id: "blabla",
              type: "td",
              layout: {
                verticalAlign: "middle",
              },
              style: {},
              widgets: [
                {
                  id: "text1",
                  type: "span",
                  text: "{{firstName}}",
                  visible: true,
                  layout: {},
                  style: {},
                  font: {
                    fontWeight: "bold"
                  },
                },
              ],
            },
          },
          {
            id: "text2",
            header: {
              id: "text2",
              type: "th",
              layout: {},
              style: {},
              widgets: [
                {
                  id: "text1",
                  type: "span",
                  text: "Last Name",
                  visible: true,
                  layout: {},
                  style: {},
                  font: {},
                },
              ],
            },
            td: {
              id: "text1",
              type: "td",
              layout: {
                verticalAlign: "middle",
              },
              style: {},
              widgets: [
                {
                  id: "text1",
                  text: "{{lastName}}",
                  type: "span",
                  visible: true,
                  layout: {},
                  style: {},
                  font: {},
                },
              ],
            },
          },
          {
            id: "earnings",
            header: {
              id: "text2",
              type: "th",
              layout: {},
              style: {},
              widgets: [
                {
                  id: "text1",
                  type: "span",
                  text: "Earnings",
                  visible: true,
                  layout: {},
                  style: {},
                  font: {},
                },
              ],
            },
            td: {
              id: "earningTD",
              type: "td",
              layout: {
                verticalAlign: "middle",
              },
              style: {},
              widgets: [
                {
                  id: "text1",
                  text: "{{earnings}}",
                  type: "span",
                  visible: true,
                  layout: {},
                  style: {},
                  font: {
                    color: "green",
                  },
                },
              ],
            },
          },
          {
            id: "Losses",
            header: {
              id: "text2",
              type: "th",
              layout: {},
              style: {},
              widgets: [
                {
                  id: "text1",
                  type: "span",
                  text: "Losses",
                  visible: true,
                  layout: {},
                  style: {},
                  font: {},
                },
              ],
            },
            td: {
              id: "lossesTD",
              type: "td",
              layout: {
                verticalAlign: "middle",
              },
              style: {},
              widgets: [
                {
                  id: "text1",
                  text: "{{losses}}",
                  type: "span",
                  visible: true,
                  layout: {},
                  style: {},
                  font: {
                    color: "red",
                  },
                },
              ],
            },
          },
          {
            id: "Total",
            header: {
              id: "text2",
              type: "th",
              layout: {},
              style: {},
              widgets: [
                {
                  id: "text1",
                  type: "span",
                  text: "Total",
                  visible: true,
                  layout: {},
                  style: {},
                  font: {},
                },
              ],
            },
            td: {
              id: "totalTD",
              type: "td",
              layout: {
                verticalAlign: "middle",
              },
              style: {},
              widgets: [
                {
                  id: "text1",
                  // text: "{{earnings()}} - {{losses()}}",
                  text: "{{earnings}} - {{losses}}",
                  type: "span",
                  visible: true,
                  layout: {},
                  style: {},
                  font: {
                    // color: "{{earnings()}} - {{losses()}} < 0 ? 'red' : 'green'",
                    color: "{{earnings}} - {{losses}} < 0 ? 'red' : 'green'",
                  },
                },
              ],
            },
          },
          {
            id: "X",
            header: {
              id: "X",
              type: "th",
              layout: {
                flexShrink: 0,
              },
              style: {
                minWidth: "90px",
                width: "90px",
              },
              widgets: [],
            },
            td: {
              id: "lossesTD",
              type: "td",
              layout: {
                display: "flex",
                gap: "5px",
                flexShrink: 0,
              },
              style: {
                minWidth: "170px",
              },
              widgets: [
                {
                  id: "slingrButton1",
                  type: "slingrWidget",
                  visible: true,
                  properties: {
                    kind: "button",
                    color: "danger",
                    id: "slingrButton",
                    text: "",
                    icon: "zmdi-close",
                    disabled: false,
                  },
                  handlers: {
                    click: "{{removeItem}}",
                  },
                  layout: {},
                  style: {},
                },
              
                {
                  id: "slingrButton1",
                  type: "slingrWidget",
                  visible: true,
                  properties: {
                    kind: "button",
                    color: "warning",
                    id: "slingrButton",
                    text: "",
                    icon: "zmdi-rotate-left",
                    disabled: false,
                  },
                  handlers: {
                    click: "{{changeName}}",
                  },
                  layout: {},
                  style: {},
                },
                {
                  id: "slingrButton1",
                  type: "slingrWidget",
                  visible: true,
                  properties: {
                    kind: "button",
                    color: "success",
                    id: "slingrButton",
                    text: "",
                    icon: "zmdi-live-tv",
                    disabled: false,
                  },
                  handlers: {
                    click: "{{displayFirstName}}",
                  },
                  layout: {},
                  style: {},
                },
                {
                  id: "slingrButton1",
                  type: "slingrWidget",
                  visible: true,
                  properties: {
                    kind: "button",
                    color: "info",
                    id: "slingrButton",
                    text: "",
                    icon: "zmdi-plus-1",
                    disabled: false,
                  },
                  handlers: {
                    click: "{{increaseEarnings}}",
                  },
                  layout: {},
                  style: {},
                },
              ],
            },
          },
        ],
      },
      {
        id: "inputTextSlingr",
        type: "slingrWidget",
        visible: true,
        properties: {
          kind: "inputText",
          id: "titleInput",
          placeholder: "First Name",
          value: "{{inputValue}}",
          password: null,
          icon: null,
          maxLength: 10,
        },
        layout: {},
        style: {
          width: "50%",
        },
      },
      {
        id: "slingrButton1",
        type: "slingrWidget",
        visible: true,
        properties: {
          kind: "button",
          color: "info",
          id: "slingrButton",
          text: "Add Entry",
          icon: "zmdi-home",
          disabled: false,
        },
        handlers: {
          click: "{{addEntry}}",
        },
        layout: {
          marginTop: "10px",
        },
        style: {
          width: "50%",
        },
      },
      {
        id: "slingrButton1",
        type: "slingrWidget",
        visible: true,
        properties: {
          kind: "button",
          color: "info",
          id: "slingrButton",
          text: "Display Input",
          icon: "zmdi-home",
          disabled: false,
        },
        handlers: {
          click: "{{displayInput}}",
        },
        layout: {
          marginTop: "10px",
        },
        style: {
          width: "50%",
        },
      },
      {
        id: "container1",
        type: "container",
        visible: true,
        with: "{{people}}",
        layout: {
          display: "flex",
          flexDirection: "row",
          flexWrap: "wrap",
          justifyContent: "center",
          flexShrink: 1,
          gap: "10px",
          columnPosition: "center",
          alignItems: "center",
          paddingTop: "10px",
          paddingBottom: "10px",
          paddingLeft: "10px",
          paddingRight: "10px",
          marginBottom: "20px",
        },
        style: {
          width: "100%",
          backgroundColor: "#F5F5DC",
          borderStyle: "dotted",
        },
        widgets: [
          {
            id: "text1",
            type: "span",
            text: "N° of people: ",
            visible: true,
            layout: {},
            style: {},
            font: {},
          },
          {
            id: "text1",
            type: "span",
            text: "{{length}}",
            visible: true,
            layout: {
              paddingLeft: "3px",
              paddingRight: "3px",
              paddingTop: "3px",
              paddingBottom: "3px",
            },
            style: {
              borderStyle: "solid",
              borderColor: "black",
            },
            font: {},
          },
        ],
      },
      {
        id: "people",
        type: "container",
        visible: true,
        if: "{{activePerson}} && Object.entries({{activePerson}}).length > 0",
        // with: "{{activePerson}}",
        layout: {
          display: "block",
          flexDirection: "row",
          flexWrap: "wrap",
          justifyContent: "center",
          flexShrink: 1,
          gap: "10px",
          columnPosition: "center",
          alignItems: "center",
          paddingTop: "10px",
          paddingBottom: "10px",
          paddingLeft: "10px",
          paddingRight: "10px",
          marginTop: "10",
          marginBottom: "20px",
          marginLeft: "auto",
          marginRight: "auto",
        },
        style: {
          minWidth: "",
          maxWidth: "",
          width: "80%",
          height: "",
          backgroundColor: "#F5F5DC",
          borderStyle: "dotted",
        },
        widgets: [
          {
            id: "container1",
            type: "container",
            layout: {
              display: "flex",
              flexDirection: "row",
              flexWrap: "wrap",
              justifyContent: "center",
              flexShrink: 1,
              gap: "10px",
              columnPosition: "center",
              alignItems: "center",
              paddingTop: "10px",
              paddingBottom: "10px",
              paddingLeft: "10px",
              paddingRight: "10px",
              marginBottom: "20px",
            },
            style: {
              width: "100%",
              backgroundColor: "#F5F5DC",
              borderStyle: "dotted",
            },
            widgets: [
              {
                id: "text1",
                type: "span",
                // text: "{{firstName}}",
                text: "{{activePerson}}.firstName",

                visible: true,
                layout: {
                  paddingLeft: "2px",
                  paddingRight: "2px",
                },
                style: {
                  width: "70px",
                  height: "",
                  backgroundColor: "#F5F5DC",
                  borderStyle: "solid",
                  borderColor: "black",
                },
                font: {},
              },
              {
                id: "text2",
                type: "span",
                // text: "{{lastName}}",
                text: "{{activePerson}}.lastName",
                visible: true,
                layout: {
                  paddingLeft: "2px",
                  paddingRight: "2px",
                },
                style: {
                  width: "70px",
                  height: "",
                  backgroundColor: "#F5F5DC",
                  borderStyle: "solid",
                  borderColor: "black",
                },
                font: {},
              },
            ],
          },
          {
            id: "pets",
            type: "repeatedContainer",
            data: "{{activePerson}}.pets",
            // if: "{{activePerson()}}.pets.length > 0",
            visible: true,
            layout: {
              display: "block",
              flexDirection: "row",
              flexWrap: "wrap",
              justifyContent: "center",
              flexShrink: 1,
              gap: "10px",
              columnPosition: "center",
              alignItems: "center",
              paddingTop: "10px",
              paddingBottom: "10px",
              paddingLeft: "10px",
              paddingRight: "10px",
              marginTop: "10",
              marginBottom: "20px",
              marginLeft: "auto",
              marginRight: "auto",
            },
            style: {
              minWidth: "",
              maxWidth: "",
              width: "80%",
              height: "",
              backgroundColor: "#F5F5DC",
              borderStyle: "dotted",
            },
            group: {
              id: "group",
              type: "span",
              visible: true,
              layout: {
                display: "flex",
                flexDirection: "row",
                flexWrap: "wrap",
                justifyContent: "center",
                flexShrink: 1,
                gap: "0",
                columnPosition: "center",
                alignItems: "center",
                paddingTop: "10px",
                paddingBottom: "10px",
                paddingLeft: "10px",
                paddingRight: "10px",
                marginTop: "5px",
                marginBottom: "5px",
                marginLeft: "auto",
                marginRight: "auto",
              },
              style: {
                minWidth: "",
                maxWidth: "",
                width: "80%",
                height: "",
                backgroundColor: "  #ADD8E6",
                borderStyle: "dotted",
              },
            },
            widgets: [
              {
                id: "text1",
                type: "span",
                text: "{{dogName}}",
                visible: true,
                layout: {
                  paddingLeft: "2px",
                  paddingRight: "2px",
                },
                style: {
                  width: "70px",
                  height: "",
                  backgroundColor: "#F5F5DC",
                  borderStyle: "solid",
                  borderColor: "black",
                },
                font: {},
              },
              {
                id: "slingrButton1",
                type: "slingrWidget",
                visible: true,
                properties: {
                  kind: "button",
                  color: "info",
                  id: "slingrButton",
                  text: "Dog",
                  icon: "zmdi-home",
                  disabled: false,
                },
                handlers: {
                  click: "{{displayDogName}}",
                },
                layout: {
                  marginLeft: "10px",
                },
                style: {
                  // width: "50%",
                },
              },
              {
                id: "slingrButton1",
                type: "slingrWidget",
                visible: true,
                properties: {
                  kind: "button",
                  color: "info",
                  id: "slingrButton",
                  text: "Owner",
                  icon: "zmdi-home",
                  disabled: false,
                },
                handlers: {
                  click: "{{displayOwnerName}}",
                },
                layout: {
                  marginLeft: "10px",
                },
                style: {
                },
              },
            ],
          },
          {
            id: "earnings",
            type: "span",
            text: "{{activePerson}}.earnings",
            visible: true,
            layout: {
              display: "inline-block",
              paddingLeft: "2px",
              paddingRight: "2px",
            },
            style: {
              width: "35px",
              height: "",
              backgroundColor: "#F5F5DC",
              borderStyle: "solid",
              borderColor: "black",
            },
            font: {
              color: "green",
            },
          },
          {
            id: "losses",
            type: "span",
            text: "{{activePerson}}.losses",
            visible: true,
            layout: {
              display: "inline-block",
              paddingLeft: "2px",
              paddingRight: "2px",
            },
            style: {
              width: "35px",
              height: "",
              backgroundColor: "#F5F5DC",
              borderStyle: "solid",
              borderColor: "black",
            },
            font: {
              color: "red",
            },
          },
          {
            id: "total",
            type: "span",
            text: "{{activePerson}}.earnings - {{activePerson}}.losses",
            visible: true,
            layout: {
              display: "inline-block",
              paddingLeft: "2px",
              paddingRight: "2px",
            },
            style: {
              width: "35px",
              height: "",
              backgroundColor:
                "{{activePerson}}.earnings - {{activePerson}}.losses < 0 ? 'red' : 'green'",
              borderStyle: "solid",
              borderColor: "black",
            },
            font: {
              color: "white",
            },
          },
          {
            id: "total",
            type: "div",
            text: "WOW! too much earnings",
            visible: true,
            if: "{{activePerson}}.earnings - {{activePerson}}.losses > 4",
            layout: {
              display: "inline-block",
              paddingLeft: "2px",
              paddingRight: "2px",
            },
            style: {
              width: "",
              height: "",
              borderStyle: "solid",
              borderColor: "black",
            },
            font: {
              fontWeight: "bold",
            },
          },
        ],
      },
    ],
  };

  var modelDefinition = [
    {
      id: "people",
      type: "array",
      elementsType: "model",
      nestedFields: [
        {
          id: "firstName",
          type: "string",
        },
        {
          id: "lastName",
          type: "string",
        },
        {
          id: "earnings",
          type: "number",
        },
        {
          id: "losses",
          type: "number",
        },
        {
          id: "pets",
          type: "array",
          elementsType: "model",
          nestedFields: [
            {
              id: "dogName",
              type: "string",
            },
          ],
        },
      ],
    },
    {
      id: "activePerson",
      type: "model",
      nestedFields: [
        {
          id: "firstName",
          type: "string",
        },
        {
          id: "lastName",
          type: "string",
        },
        {
          id: "earnings",
          type: "number",
        },
        {
          id: "losses",
          type: "number",
        },
        {
          id: "pets",
          type: "array",
          elementsType: "model",
          nestedFields: [
            {
              id: "dogName",
              type: "string",
            },
          ],
        },
      ],
    },
    {
      id: "companyNames",
      type: "array",
      elementsType: "string",
    },
    {
      id: "title",
      type: "string",
    },
    {
      id: "title2",
      type: "string",
    },
    {
      id: "model",
      nestedField: [
        {
          name: "firstName",
          type: "string",
        },
        {
          name: "lastName",
          type: "number",
        },
      ],
    },
    {
      id: "inputValue",
      type: "string",
      value: "",
    },
    {
      id: "displayInput",
      type: "function",
      // [[array]] will bring the array wrapper
      handler:
        "alert('a ver... '+model.inputValue);",
    },
    {
      id: "addEntry",
      type: "function",
      // [[array]] will bring the array wrapper
      handler:
        "model.people.push({firstName: model.inputValue  ,lastName:'TEST',earnings: 2, losses: 3, pets: [{dogName: 'pocha'}, {dogName: 'tara'}]});",
    },
    {
      id: "removeItem",
      type: "function",
      handler: "model.people.splice($index, 1);",
    },
    {
      id: "changeName",
      type: "function",
      // $item brings the current element data of the iterated array,
      handler: "$item.firstName = model.inputValue;",
    },
    {
      id: "displayFirstName",
      type: "function",
      handler: "console.log('$item',$item);alert('firstName: '+ $item.firstName); model.activePerson = $item; console.log('$model',model)",
    },
    {
      id: "displayDogName",
      type: "function",
      handler: "alert($item.dogName);",
    },
    {
      id: "displayOwnerName",
      type: "function",
      handler:
        "alert('owner name: '+model.activePerson.firstName  +' '+ model.activePerson.lastName+'... title: '+ model.title);",
    },
    {
      id: "increaseEarnings",
      type: "function",
      handler: "$item.earnings += 1",
    },
    {
      id: "addDog",
      type: "function",
      handler: "$item.pets.push({dogName: 'newDog'});",
    },
  ];

  modelObject = {
    title: "hello",
    title2: "hello2",
    activePerson: null,
    people: [
      {
        firstName: "Juan",
        lastName: "Guardiola",
        earnings: 2,
        losses: 3,
        pets: [{ dogName: "pocha" }, { dogName: "tara" }],
      },
      {
        firstName: "Pedro",
        lastName: "Paramo",
        earnings: 5,
        losses: 4,
        pets: [],
      },
      {
        firstName: "Julio",
        lastName: "Verne",
        earnings: 4,
        losses: 1,
        pets: [{ dogName: "cuchu" }],
      },
    ],
    inputValue: "HOLA",
  };
  var viewModel = {},
    ko = require("knockout"),
    widgetUtils = require("common-ui/widgets/widgetUtils");
  ko.options.useOnlyNativeEvents = true;

  renderJSON = function () {
    let outputContainer = $("#output");
    let modelDefinition = JSON.parse(viewModel.textAreas.modelDefinition.value);
    let modelObject = JSON.parse(viewModel.textAreas.modelObject.value);
    buildRootModel(modelDefinition, modelObject);
    let json = JSON.parse(viewModel.textAreas.jsonInput.value);
    outputContainer.removeAttr("style");
    outputContainer.empty();
    let container = buildContainerElement(
      "",
      outputContainer,
      json,
      viewModel,
      true
    );

    ko.applyBindings(rootModel, container);

    outputContainer.append(container);
  };

  viewModel.activate = function () {
    let self = this;
    this.textAreas = {
      jsonInput: {
        id: "jsonInput",
        value: JSON.stringify(defaultJson, undefined, 4),
        cols: 30,
        rows: 20,
      },
      modelDefinition: {
        id: "modelDefinition",
        value: JSON.stringify(modelDefinition, undefined, 4),
        cols: 25,
        rows: 20,
      },
      modelObject: {
        id: "modelObject",
        value: JSON.stringify(modelObject, undefined, 4),
        cols: 25,
        rows: 20,
      },
      // none: {
      //   id: "test1",
      //   value: '',
      //   cols: 0,
      //   rows: 0,
      // },
    };
    this.activeInput = ko.observable(this.textAreas.none);
    this.tabsSettings = {
      $color: null,
      $alignment: "left",
      $active: "none",
      $items: [
        { id: "jsonInput", icon: "zmdi-home", text: "JSON INPUT", content: "" },
        {
          id: "modelObject",
          icon: "",
          text: "Model Object",
          content: "",
        },
        {
          id: "modelDefinition",
          icon: "",
          text: "Model Definition",
          content: "",
        },
        {
          id: "none",
          icon: "",
          text: "None",
          content: "",
        },
      ],
      tabSelectedCallback: function (tab) {
        if (tab && tab.id) {
          switch (tab.id) {
            case "jsonInput":
              console.log("jsonInput");
              self.activeInput(self.textAreas.jsonInput);
              break;
            case "modelObject":
              console.log("modelObject");
              self.activeInput(self.textAreas.modelObject);
              break;
            case "modelDefinition":
              console.log("modelDefinition");
              self.activeInput(self.textAreas.modelDefinition);
              break;
            case "none":
              console.log("modelDefinition");
              self.activeInput("");
              break;
          }
        }
      },
    };
  };
  return viewModel;
});

var rootModel = {};
var modelDefinition = {};

function removeAttributes(element) {
  for (let i = 0; i < element.attributes.length; i++) {
    element.removeAttribute(element.attributes[i].name);
  }
}

function removeChildElements(element) {
  while (element.hasChildNodes()) {
    element.removeChild(element.groupfirstChild);
  }
}

function renderButton(kind, color, click, id, text, icon, disabled) {
  return {
    kind: kind,
    color: color,
    click: click, //wrap for avoid context problems.
    id: id,
    text: text,
    icon: icon,
    disabled: disabled,
  };
}

class Model {
  constructor(modelObject) {
    let observables = {};
    for (let key in modelObject) {
      if (isObject(modelObject[key]) && isArray(modelObject[key])) {
        observables[key] = ko.observableArray(modelObject[key]);
      } else {
        observables[key] = ko.observable(modelObject[key]);
      }
    }
    Object.assign(this, observables);
  }

  getValue(param) {
    return this[param]();
  }
  setValue(param, value) {
    return this[param](value);
  }
}

function buildRootModel(modelDefinition, modelObject) {
  this.modelDefinition = modelDefinition;
  // rootModel = buildModel(modelDefinition, modelObject);
  rootModel = deepProxy(buildModel(modelDefinition, modelObject));
  console.log("rootModel: ", rootModel);
  return;
}

function buildModel(modelDefinition, modelObject) {
  let model = {};
  for (key in modelObject) {
    let definition = findDefinitionKey(modelDefinition, key);
    if (definition) {
      validateKey(definition, key, modelObject[key], model);
    } else {
      alert("Var: " + key + " has not been defined");
      throw "Var: " + key + " has not been defined";
    }
  }
  for (definition in modelDefinition) {
    if (modelDefinition[definition].type == "function") {
      let handler = modelDefinition[definition].handler;
      model[modelDefinition[definition].id] = buildFunctionWithHelpers(handler);
    }
  }
  return model;
}

function buildFunctionWithHelpers(handler) {
  let parameters = ["$root", "model", "$item", "$index", "$parent", "$parents"];
  return function () {
    let newFunction = new Function(parameters, handler);

    let $data = arguments[0];
    let $root = rootModel;
    let $item =
      $data.settings && $data.settings.bindingContext
        ? $data.settings.bindingContext.$data
        : $data;
    let $parents =
      $data.settings && $data.settings.bindingContext
        ? $data.settings.bindingContext.$parents
        : null;
    let $index =
      $data.settings &&
      $data.settings.bindingContext &&
      $data.settings.bindingContext.$index
        ? $data.settings.bindingContext.$index()
        : null;
    console.log("-------------------------------------");
    console.log("args", arguments);
    console.log("root", $root);
    console.log("$data", $data);
    console.log("item", $item);
    console.log("are equal", $item === $root);
    console.log("index", $index);
    console.log("parents", $parents);

    let model = deepProxy(rootModel);
    if ($item) {
      if ($item === $root) {
        console.log("creating $item model", model);
        $item = model;
      } else {
        $item = deepProxy($item);
      }
      // $item = deepProxy($item);
    }
    let parentsProxies = [];
    let parent = null;
    if ($parents) {
      $parents.forEach((context) => {
        console.log("creating $parents model", context);
        if (context === $root) {
          parentsProxies.push(context);
        } else {
          parentsProxies.push(deepProxy(context));
        }
      });
      parent = parentsProxies[0];
      $root = parentsProxies[parentsProxies.length - 1];
    }

    // console.log("PARENT PROXIES: ", parentsProxies);
    // if ($parents) $parents = deepProxy($parents);
    return newFunction($root, model, $item, $index, parent, parentsProxies);
  };
}

function isObject(obj) {
  return typeof obj === "object";
}
const arrayChangeMethod = [
  "push",
  "pop",
  "unshift",
  "shift",
  "splice",
  "sort",
  "reverse",
];
function isObject(obj) {
  return typeof obj === "object";
}
function isArray(arr) {
  return Array.isArray(arr);
}

let myProxySet = new WeakSet();

function deepProxy(model, target2) {
  console.log("DEEP PROXY model ", model);
  console.log("DEEP PROXY target2", target2);
  const mapStore = {};
  let arrayChanging = false;
  if (model && !myProxySet.has(model)) {
    let proxy = new Proxy(model, {
      get(target, property, receiver) {
        if (typeof property == "symbol") return target[property];
        
        console.log("GET -----------------------------------");
        // console.log("GET target", target);
        // console.log("GET property", property);
        // console.log("GET receiver", receiver);
        // console.log("GET target[property]", target[property]);
        let value = target[property];
        if (typeof target === "function" && target.name == "observable") {
          value = target()[property];
          // console.log("GET RETURNING target()[property]: ", value);
        } else if (
          typeof target[property] === "function" &&
          target[property].name == "observable"
        ) {
          value = target[property]();
          // console.log("GET RETURNING target[property](): ", value);
        } else {
          // console.log("GET RETURNING target[property]: ", value);
          // value = target[property];
        }
        if (isArray(target) && arrayChangeMethod.indexOf(property) > -1) {
          console;
          // we override the array's method
          return (...args) => {
            arrayChanging = true;
            console.log("GET Array args", ...args);
            console.log("GET Array property", property);
            console.log("GET Array receiver", receiver);
            console.log("GET Array value", value);
            console.log("GET Array target", target);
            console.log("GET Array target2", target2);
            console.log("GET Array target2", target2());
            value.bind(receiver)(...args);
            arrayChanging = false;
          };
        }
        if (mapStore[property] === true) return value;
        if (isObject(value) || isArray(value)) {
          console.log("Recursive method: target ", target);
          console.log("Recursive method: value ", value);
          console.log("Recursive method: property ", property);
          console.log("Recursive method: typeof property ", typeof property);
          console.log("Recursive method: target[property] ", target[property]);
          console.log(
            "Recursive method: mapStore[property] ",
            mapStore[property]
          );
          // console.log("value: ", value);
          const proxyValue =
           mapStore[property] || deepProxy(value, target[property]);
          mapStore[property] = proxyValue;
          return proxyValue;
        }
        mapStore[property] = true;

        // console.log("GET value", value);
        // console.log("GET target", target);
        // console.log("GET property", property);
        // console.log("GET receiver", receiver);
        // console.log("GET target[property]", target[property]);
        return value;
      },
      set(target, property, value) {
        // console.log("SET value: ", value);
        // console.log("SET target", target);
        // console.log("SET property", property);
        // console.log("SET target[property]", target[property]);
        // console.log("SET target2", target2);
        // console.log("SET newVal", newVal);
        let newVal;
        if (isObject(value)) {
          if (isArray(value)) {
            newVal = deepProxy(value, target[property]);
          } else {
            newVal = deepProxy(new Model(value), target[property]);
          }
        } else {
          newVal = value;
        }
        if (!arrayChanging) console.log("array changing");
        if (typeof target2 === "function" && target2.name == "observable") {
          target[property] = newVal;
          if (property !== "length") target2(target);
        } else if (
          typeof target[property] === "function" &&
          target[property].name == "observable"
        ) {
          target[property](newVal);
        } else {
          target[property] = newVal;
        }
        mapStore[property] = true;
        return true;
      },
      deleteProperty(target, property) {
        console.log("DELETE target", target);
        console.log("DELETE property", property);
        console.log("DELETE target[property]", target[property]);
        console.log("DELETE arguments", arguments);
        console.log("DELETE target2", target2);
        // delete target[property];
        delete mapStore[property];
        if (typeof target2 === "function" && target2.name == "observable") {
          target2.remove(target[property]);
        }
        return true;
      },
    });
    console.log("ADDING PROXY TO SET", proxy);
    myProxySet.add(proxy);
    console.log("MY PROXY SET", myProxySet);

    return proxy;
  } else {
    console.log("Proxy exists");
    return model;
  }
}

function findDefinitionKey(modelDefinition, key) {
  let definition;
  modelDefinition.map((object) => {
    if (object.id === key) {
      definition = object;
    }
  });
  return definition;
}

function validateKey(definition, key, value, model) {
  let valid = false;
  switch (definition.type) {
    case "string":
    case "number":
      if (typeof value == definition.type) {
        if (model) model[key] = ko.observable(value);
        valid = true;
      }
      break;
    case "boolean":
      if (typeof value == "boolean") {
        if (model) model[key] = ko.observable(value);
        valid = true;
      }
      break;
    case "array":
      let array = [];
      model[key] = ko.observableArray();
      if (definition.elementsType !== "record") {
        array = validateArray(value, definition);
        if (model) {
          // model[key] = ko.observableArray(deepProxy(array));
          model[key](deepProxy(array, model[key]));
          console.log("modelkey: ", model[key]());
        }
      } else {
        console.log("fetching: ");
        slingr.ws.get(
          {
            url: "/data/" + definition.query.entity,
            params: { _size: definition.query.size },
          },
          function (res) {
            console.log("fetching: ", res);
            res.items.forEach((item) => {
              array.push(new Model(item));
            });
            model[key](deepProxy(array, model[key]));
          }
        );
      }
      valid = true;
      break;
    case "JSON":
      console.log("JSON value", value);
      if (model) model[key] = ko.observable(value);
      valid = true;
      break;
    case "model":
      validateModel(value, definition.nestedFields);
      console.log("VALUE", value);
      if (model) {
        if (value) {
          model[key] = ko.observable(deepProxy(new Model(value)));
          // model[key] = ko.observable(new Model(value));
        } else {
          model[key] = ko.observable();
        }
      }
      valid = true;
      break;
    case "record":
      valid = true;
      break;
  }
  if (!valid) {
    noValidTypeError(key, typeof value, definition);
  }
  return valid;
}

function validateArray(array, arrayDefinition) {
  let data = [];
  for (element in array) {
    if (
      arrayDefinition.elementsType == "model" ||
      arrayDefinition.elementsType == "JSON"
    ) {
      let model = {};
      for (key in array[element]) {
        let definition = findDefinitionKey(arrayDefinition.nestedFields, key);
        if (definition) {
          validateKey(definition, key, array[element][key], model);
        } else {
          alert("Var: " + key + " has not been defined");
          throw "Var: " + key + " has not been defined";
        }
      }
      // data.push(deepProxy(model));
      data.push(deepProxy(model));
    } else {
      validateKey(
        { id: "arrayElement", type: arrayDefinition.elementsType },
        arrayDefinition.id,
        array[element]
      );
      data.push(element);
    }
  }
  return data;
}

function validateModel(modelObject, nestedFields) {
  for (key in modelObject) {
    let definition = findDefinitionKey(nestedFields, key);
    if (definition) {
      validateKey(definition, key, modelObject[key]);
    } else {
      alert("key: " + key + "is not defined");
      throw "key: " + key + "is not defined";
    }
  }
}

function noValidTypeError(key, currentType, definition) {
  alert(
    "wrong type of key:  " +
      key +
      ". It is a: " +
      currentType +
      " and should be a: " +
      definition.type
  );
  throw (
    "wrong type of key:  " +
    key +
    ". It is a: " +
    currentType +
    " and should be a: " +
    definition.type
  );
}

function buildContainerElement(parentObject, parentElement, elementObject) {
  let container = document.createElement("div");
  if (elementObject.type == "formGroup") container.classList.add("form-group");
  removeAttributes(container);
  removeChildElements(container);
  container = setWidgetCss(
    parentObject,
    parentElement,
    elementObject,
    container
  );
  buildChildWidgets(elementObject, container);
  checkIfBindings(elementObject, container);
  return container;
}

function buildTabsElement(parentObject, parentElement, elementObject) {
  let container = document.createElement("div");
  container = setWidgetCss(
    parentObject,
    parentElement,
    elementObject,
    container
  );
  console.log(
    "buildTabsElement element object: ",
    elementObject.properties.tabs
  );
  let tabContainer = document.createElement("div");
  tabContainer.setAttribute("data-part", "content");
  container.append(tabContainer);

  elementObject.properties.tabs.forEach((tab) => {
    let ifContainer = document.createElement("div");
    ifContainer.setAttribute("data-bind", "if: id == '" + tab.id + "'");
    buildChildWidgets(tab, ifContainer);
    tabContainer.append(ifContainer);
  });
  console.log("container", container);
  checkIfBindings(elementObject, container);
  return container;
}

function buildChildWidgets(elementObject, container) {
  elementObject.widgets.forEach(function (childElement) {
    let widget;
    switch (childElement.type) {
      case "formGroup":
      case "container":
        widget = buildContainerElement(
          elementObject,
          container,
          childElement,
          true
        );
        break;
      case "tabs":
        widget = buildTabsElement(elementObject, container, childElement);
        break;
      case "repeatedContainer":
        widget = buildRepeatedContainerElement(
          elementObject,
          container,
          childElement,
          false
        );
        break;
      case "table":
        widget = buildTableElement(elementObject, container, childElement);
        break;
      case "slingrWidget":
      default:
        widget = buildWidgetElement(elementObject, container, childElement);
        checkIfBindings(childElement, widget);
    }
    if (childElement.if) {
      widget = wrapIfWithContainer("if", childElement, widget);
    }
    if (childElement.with) {
      widget = wrapIfWithContainer("with", childElement, widget);
      console.log("WITH", widget);
    }
    container.appendChild(widget);
  });
}

function wrapIfWithContainer(key, childElement, widget) {
  let ifContainer;
  ifContainer = document.createElement("div");
  let value = checkBinding({}, key, childElement[key]);
  let observable = buildKnockoutHTMLBinding(value);
  ifContainer.setAttribute("data-bind", key + ":" + observable);
  ifContainer.append(widget);
  return ifContainer;
}

function buildRepeatedContainerElement(
  parentObject,
  parentElement,
  elementObject
) {
  let container = document.createElement("div");
  container = setWidgetCss(
    parentObject,
    parentElement,
    elementObject,
    container
  );
  let ifContainer;
  let group = document.createElement(elementObject.group.type);
  group = setWidgetCss(elementObject, container, elementObject.group, group);
  buildChildWidgets(elementObject, group, null);
  checkIfBindings(elementObject.group, group);
  container.append(group);
  checkIfBindings(elementObject, container, true);
  return container;
}

function buildTableElement(parentObject, parentElement, elementObject) {
  let table = document.createElement("table");
  table.classList.add("table");

  table = setWidgetCss(parentObject, parentElement, elementObject, table);
  elementObject.tableTypes.forEach((element) => {
    table.classList.add(element);
  });
  let thead = document.createElement("thead");
  let theadRow = document.createElement("tr");
  let tbody = document.createElement("tbody");
  let tbodyRow = document.createElement("tr");
  for (column in elementObject.columns) {
    //build header
    buildTableRow(elementObject.columns[column].header, theadRow, "header");
    //build tbody
    buildTableRow(elementObject.columns[column].td, tbodyRow, "tbody");
  }
  thead.append(theadRow);
  table.append(thead);
  tbody.append(tbodyRow);
  let data;
  if (isBinding(elementObject.data)) {
    data = buildKnockoutHTMLBinding(elementObject.data);
  }
  tbody.setAttribute("data-bind", "foreach:" + data);
  table.append(tbody);
  return table;
}

function buildTableRow(element, tr, tablePart) {
  let telement;
  if (tablePart == "header") {
    telement = document.createElement("th");
    telement.setAttribute("scope", "col");
  } else if (tablePart == "tbody") {
    telement = document.createElement(element.type);
    if (element.type == "th") telement.setAttribute("scope", "row");
  }
  buildChildWidgets(element, telement, false, null);
  setWidgetCss("", "", element, telement);
  checkIfBindings(element, telement);
  tr.append(telement);
}

function buildWidgetElement(parentObject, parentElement, elementObject) {
  let elementType =
    elementObject.type == "slingrWidget" ? "div" : elementObject.type;
  let widget = document.createElement(elementType);
  widget.setAttribute("id", elementObject.id);
  switch (elementObject.type) {
    case "button":
      widget.classList.add("btn");
      widget.classList.add(elementObject.properties.class);
      break;
    case "input":
      widget.classList.add("form-control");
      widget = setInputProp(elementObject, widget);
      break;
  }
  widget = setWidgetCss(parentObject, parentElement, elementObject, widget);
  widget = setTextProp(elementObject, widget);
  return widget;
}

function setInputProp(elementObject, widget) {
  widget.setAttribute("type", elementObject.properties.type);
  if (elementObject.properties.placeholder) {
    widget.setAttribute("placeholder", elementObject.properties.placeholder);
  }
  if (elementObject.properties.value) {
    widget.value = elementObject.properties.value;
  }
  return widget;
}

function setTextProp(elementObject, widget) {
  if (elementObject.font) {
    Object.assign(widget.style, {
      "text-align": elementObject.layout.textAlign,
      "text-decoration-line": elementObject.layout.textDecorationLine,
      "text-transform": elementObject.layout.textTransform,
      "letter-spacing": elementObject.layout.letterSpacing,
      "line-height": elementObject.layout.lineHeight,
      color: elementObject.font.color,
      "font-family": elementObject.font.fontFamily
        ? elementObject.font.fontFamily
        : null,
      "font-style": elementObject.font.fontStyle,
      "font-size": elementObject.font.fontSize,
      "font-weight": elementObject.font.fontWeight,
    });
  }
  if (
    elementObject.text &&
    !isBinding(elementObject.text) &&
    elementObject.text.indexOf("$") == -1
  ) {
    widget.innerHTML = elementObject.text;
  }
  return widget;
}

function setWidgetCss(parentObject, parentElement, elementObject, widget) {
  Object.assign(widget.style, {
    width: elementObject.style.width,
    "min-width": elementObject.style.minWidth,
    "max-width": elementObject.style.maxWidth,
    "min-height": elementObject.style.minHeight,
    "max-height": elementObject.style.maxHeight,
    height: elementObject.style.height,
    display: elementObject.layout.display,
    verticalAlign: elementObject.layout.verticalAlign,
    "flex-direction": elementObject.layout.flexDirection,
    "justify-content": elementObject.layout.justifyContent,
    "flex-shrink": elementObject.layout.flexShrink,
    gap: elementObject.layout.gap,
    "padding-top": elementObject.layout.paddingTop,
    "padding-bottom": elementObject.layout.paddingBottom,
    "padding-right": elementObject.layout.paddingRight,
    "padding-left": elementObject.layout.paddingLeft,
    "margin-top": elementObject.layout.marginTop,
    "margin-bottom": elementObject.layout.marginBottom,
    "margin-right": elementObject.layout.marginRight,
    "margin-left": elementObject.layout.marginLeft,
    "background-color": elementObject.style.backgroundColor,
    "border-style": elementObject.style.borderStyle,
    "border-color": elementObject.style.borderColor,
  });
  widget = setRowColumnLayout(parentObject, parentElement, widget);
  return widget;
}

function setRowColumnLayout(parentObject, parentElement, widget) {
  console.log();
  if (parentObject && parentObject.layout) {
    if (parentObject.layout.flexDirection == "column") {
      switch (parentObject.layout.columnPosition) {
        case "left":
          Object.assign(widget.style, {
            "margin-right": "auto",
          });
          break;
        case "right":
          Object.assign(widget.style, {
            "margin-left": "auto",
          });
          break;
        case "center":
          Object.assign(widget.style, {
            "margin-left": "auto",
            "margin-right": "auto",
          });
          break;
      }
    } else if (parentObject.layout.flexDirection == "row") {
      Object.assign(parentElement.style, {
        "align-items": parentObject.layout.alignItems,
        "flex-wrap": parentObject.layout.flexWrap,
      });
    }
  }
  return widget;
}

function checkIfBindings(elementObject, widget, forEachBinding) {
  let styleBindedAttributes = {};
  let otherAttributes = {};
  for (key in elementObject.style) {
    checkBinding(styleBindedAttributes, key, elementObject.style[key]);
  }
  for (key in elementObject.layout) {
    checkBinding(styleBindedAttributes, key, elementObject.layout[key]);
  }
  for (key in elementObject.font) {
    checkBinding(styleBindedAttributes, key, elementObject.font[key]);
  }
  checkBinding(otherAttributes, "text", elementObject.text);
  checkBinding(otherAttributes, "visible", elementObject.visible);
  if (forEachBinding)
    checkBinding(otherAttributes, "foreach", elementObject.data);
  // slingr widgets handlers are processed in createSlingrWidgetBindingString()
  if (elementObject.handlers && elementObject.type !== "slingrWidget") {
    Object.keys(elementObject.handlers).forEach((event) => {
      if (isBinding(elementObject.handlers[event]))
        otherAttributes[event] = elementObject.handlers[event];
    });
  }
  let slingrWidgetbinding;
  if (elementObject.type == "slingrWidget") {
    let properties = elementObject.properties;
    slingrWidgetbinding = createSlingrWidgetBindingString(
      properties,
      elementObject
    );
  } else if (elementObject.type == "tabs") {
    let properties = buildTabsProperties(elementObject);
    slingrWidgetbinding = createSlingrWidgetBindingString(
      properties,
      elementObject
    );
  } else {
    for (key in elementObject.properties) {
      if (isBinding(elementObject.properties[key])) {
        otherAttributes[key] = elementObject.properties[key];
      }
    }
  }
  if (
    Object.keys(styleBindedAttributes).length !== 0 ||
    slingrWidgetbinding ||
    Object.keys(otherAttributes).length !== 0
  ) {
    createBindings(
      styleBindedAttributes,
      otherAttributes,
      slingrWidgetbinding,
      widget
    );
    return true;
  } else {
    return false;
  }
}

function buildTabsProperties(elementObject) {
  let items = [];
  elementObject.properties.tabs.forEach((tab) => {
    items.push({
      id: tab.id,
      icon: "",
      text: tab.text,
      content: "",
      callback: tab.handlers.activate,
    });
  });
  return {
    color: null,
    alignment: elementObject.properties.alignment,
    active: elementObject.properties.active,
    items: items,
    tabSelectedCallback: function (data) {
      let func = buildTabFunction(data);
      return func();
    },
  };
}
function buildTabFunction(data) {
  let parameters = ["$data", "model"];
  return function () {
    let newFunction = new Function(parameters, data.callback);
    delete data.callback;
    let $root = rootModel;
    let model = deepProxy(rootModel);
    return newFunction(data, model);
  };
}

function checkBinding(attributesObject, key, input) {
  let binding = isBinding(input);
  if (binding) {
    attributesObject[key] =
      binding == "observable" ? input : createComputedObservable(input);
  }
  return attributesObject[key];
}

function isBinding(input) {
  if (
    input &&
    input !== undefined &&
    typeof input == "string" &&
    input.match(/{{(.*?)}}/g)
  ) {
    let inputBindings = input.match(/{{(.*?)}}/g);
    if (inputBindings.length == 1 && !input.replace(inputBindings[0], "")) {
      return "observable";
    } else {
      return "computedObservable";
    }
  } else {
    return "";
  }
}

function createBindings(
  styleBindedAttributes,
  otherAttributes,
  slingrWidgetbinding,
  widget
) {
  let array = [];
  if (Object.keys(styleBindedAttributes).length !== 0)
    array.push(createStyleBindingString(styleBindedAttributes));
  if (Object.keys(otherAttributes).length !== 0)
    array.push(createOtherBindingString(otherAttributes));
  if (slingrWidgetbinding) array.push(slingrWidgetbinding);
  widget.setAttribute("data-bind", array.join(", "));
}

function createStyleBindingString(attributes) {
  stringifiedAttributes = "";
  let array = [];
  for (key in attributes) {
    if (attributes[key] && typeof attributes[key] === "string") {
      observable = buildKnockoutHTMLBinding(attributes[key]);
      let htmlProp = getHTMLProp(key);
      array.push("'" + htmlProp + "'" + ": " + observable);
    }
  }
  return "style: {" + array.join(", ") + "}";
}

function createSlingrWidgetBindingString(properties, elementObject) {
  let bindingString =
    elementObject.type == "slingrWidget" ? "widget: {" : "tabs:{";
  let array = [];
  for (key in properties) {
    let widgetParameter = processWidgetProperties(properties, key);
    array.push(key + ":" + widgetParameter);
  }
  if (elementObject.handlers) {
    let widgetParameter = processWidgetProperties(
      elementObject.handlers,
      "click"
    );
    array.push("click:" + widgetParameter);
  }
  bindingString += array.join(", ") + "}";
  return bindingString;
}

function processWidgetProperties(properties, key) {
  let widgetParameter;
  let propertyBinding = isBinding(properties[key]);
  if (propertyBinding) {
    let binding =
      propertyBinding == "observable"
        ? properties[key]
        : createComputedObservable(properties[key], elementObject.id);
    widgetParameter = buildKnockoutHTMLBinding(binding);
    if (key == "click") widgetParameter = "$root." + widgetParameter;
  } else if (key == "click") {
    let handler = properties[key];
    console.log("setting function ", modelDefinition[definition].id);
    widgetParameter = buildFunctionWithHelpers(handler);
  } else {
    widgetParameter =
      typeof properties[key] == "string"
        ? "'" + properties[key] + "'"
        : properties[key];
  }
  if (typeof widgetParameter == "object") {
    widgetParameter = JSON.stringify(widgetParameter);
  }
  return widgetParameter;
}

function createOtherBindingString(attributes) {
  stringifiedAttributes = "";
  let array = [];
  for (key in attributes) {
    if (attributes[key] && typeof attributes[key] === "string") {
      let observable = buildKnockoutHTMLBinding(attributes[key]);
      if (key == "keypress") {
        array.push("event:{" + key + ": " + observable + "}");
      } else if (key == "click") {
        array.push(key + ": $root." + observable);
      } else {
        array.push(key + ": " + observable);
      }
    }
  }
  if (array.length == 0) {
    return "";
  } else {
    return array.join(", ");
  }
}

function createComputedObservable(binding) {
  let bindings = binding.match(/{{(.*?)}}/g);
  let value = binding;
  bindings.forEach((element) => {
    let param = buildKnockoutHTMLBinding(element);
    // let observableValue = param +"()";
    let observableValue = param;
    value = value.replace(element, observableValue);
  });
  console.log("COMPUTED BINDING_ ", value);
  return "{{" + value + "}}";
}

function buildKnockoutHTMLBinding(binding) {
  if (typeof binding == "string") {
    binding = binding.match(/{{(.*?)}}/);
    if (binding.length > 0) {
      binding = typeof binding == "object" ? binding[1] : binding;
      binding = binding.replace("model.", "$root.");
      binding = binding.replace("parent.", "$parent.");
    }
  }
  return binding;
}

function getHTMLProp(input) {
  switch (input) {
    case "minWidth":
      return "min-width";
    case "maxWidth":
      return "max-width";
    case "minWidth":
      return "min-width";
    case "minHeight":
      return "min-height";
    case "maxHeight":
      return "max-height";
    case "flexDirection":
      return "flex-direction";
    case "flexShrink":
      return "flex-shrink";
    case "paddingTop":
      return "padding-top";
    case "paddingBottom":
      return "padding-top";
    case "paddingTop":
      return "padding-bottom";
    case "paddingRight":
      return "padding-right";
    case "paddingLeft":
      return "padding-left";
    case "marginTop":
      return "margin-top";
    case "marginBottom":
      return "margin-bottom";
    case "marginRight":
      return "margin-right";
    case "marginLeft":
      return "margin-left";
    case "backgroundColor":
      return "background-color";
    case "borderStyle":
      return "border-style";
    case "borderColor":
      return "border-color";
    case "verticalAlign":
      return "vertical-align";
    default:
      return input;
  }
}

